from flask import Flask, request, render_template, Response
from werkzeug.utils import secure_filename
import pandas as pd
from fpdf import FPDF
import logging
import os

app = Flask(__name__)

# Enable logging for debugging
logging.basicConfig(level=logging.DEBUG)

# Function to create PDF
def create_pdf(df, title):
    pdf = FPDF(orientation='L')  # Set to landscape orientation
    pdf.add_page()

    # Set colors for header
    pdf.set_fill_color(52, 152, 219)  # Blue background
    pdf.set_text_color(255, 255, 255)  # White text

    # Add title
    pdf.set_font("Arial", 'B', size=16)
    pdf.cell(0, 15, title, 1, 1, 'C', 1)
    pdf.ln(10)

    # Reset text color for data
    pdf.set_text_color(0, 0, 0)  # Black text

    # Check if the DataFrame is empty
    if df.empty:
        pdf.set_font("Arial", 'I', size=12)
        pdf.cell(0, 10, "No data available", 0, 1, 'C')
        return pdf.output(dest='S').encode('latin-1')

    # Get the column widths based on DataFrame columns
    page_width = pdf.w - 20
    col_width = page_width / len(df.columns)

    # Add column headers
    pdf.set_font("Arial", 'B', size=12)
    for column in df.columns:
        pdf.cell(col_width, 10, str(column), 1, 0, 'C', 1)
    pdf.ln()

    # Add data rows
    pdf.set_font("Arial", size=10)
    for index, row in df.iterrows():
        for value in row:
            pdf.cell(col_width, 10, str(value), 1, 0, 'L')
        pdf.ln()

    # Add a footer
    pdf.set_font("Arial", 'I', size=10)
    pdf.set_text_color(128, 128, 128)  # Gray text
    pdf.cell(0, 10, "Generated by Excel Table Generator", 0, 0, 'C')

    # Return PDF output as bytes
    return pdf.output(dest='S').encode('latin-1')

# Main route handling GET and POST requests
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        logging.debug(f"Form Data: {request.form}")

        # Handle file upload
        if 'file' in request.files:
            file = request.files['file']
            filename = secure_filename(file.filename)
            file.save(filename)

            # Load the Excel file into a DataFrame
            df = pd.read_excel(filename)

            # Display data in the table and pass filename to the form
            return render_template('index.html', data=df.to_html(index=False), filename=filename)

        # Retrieve filename from form
        filename = request.form.get('filename')

        # Ensure filename is valid
        if not filename or not os.path.exists(filename):
            logging.error(f"File not found: {filename}")
            return "File not found", 400

        # Filter data based on selected grade
        filter_grade = request.form.get('filter_grade')

        # Load the Excel file into a DataFrame
        df = pd.read_excel(filename)

        # Download all data as PDF
        if request.form.get('download_all'):
            logging.debug("Downloading all data as PDF")

            # Generate the PDF for all data
            pdf_buffer = create_pdf(df, "All Data")

            # Return the PDF as a response
            return Response(
                pdf_buffer,
                mimetype='application/pdf',
                headers={'Content-Disposition': 'attachment; filename=all_data.pdf'}
            )

        # Filter and download filtered data as PDF
        if filter_grade:
            df.columns = df.columns.str.strip()  # Strip spaces from column names
            filtered_df = df[df['Grade'].astype(str).str.strip() == filter_grade.strip()]

            logging.debug(f"Filtered DataFrame: {filtered_df}")

            if request.form.get('download_filtered'):
                logging.debug(f"Generating PDF for filtered data by grade: {filter_grade}")

                # Check if the filtered DataFrame is empty
                if filtered_df.empty:
                    logging.error(f"No data found for grade {filter_grade}")
                    return f"No data found for grade {filter_grade}", 400

                # Generate the filtered PDF
                pdf_buffer = create_pdf(filtered_df, f"Filtered Data by {filter_grade}")

                # Return the PDF as a response
                return Response(
                    pdf_buffer,
                    mimetype='application/pdf',
                    headers={'Content-Disposition': f'attachment; filename=filtered_data_by_{filter_grade}.pdf'}
                )

            # Render filtered data in the table
            return render_template('index.html', data=filtered_df.to_html(index=False), filter_grade=filter_grade, filename=filename, filtered=True)

        # Clear filter
        if request.form.get('clear_filter'):
            return render_template('index.html', data=df.to_html(index=False), filename=filename)

    # Render the index page on GET request
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
